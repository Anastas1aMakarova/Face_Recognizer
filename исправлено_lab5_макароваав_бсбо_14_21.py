# -*- coding: utf-8 -*-
"""исправлено_Lab5_МакароваАВ_БСБО-14-21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QI1LGBAc-loLogRx2iwJ68pLtKjB4yTW

##**Подготовка**
"""

from google.colab import drive
drive.mount('/content/drive')

pip install dlib

pip install face-recognition==1.3.0

pip install numpy

pip install Pillow==9.4.0

from pathlib import Path
from collections import Counter
import face_recognition
import pickle

"""##**Выполнение**"""

DEFAULT_ENCODINGS_PATH = Path("/content/drive/MyDrive/face_recognizer/output/encodings.pkl")

def encode_known_faces(model: str = "hog", encodings_location: Path = DEFAULT_ENCODINGS_PATH) -> None:
    names = []
    encodings = []
    name_encodings = []
    for filepath in Path("/content/drive/MyDrive/face_recognizer/training").glob("*/*"):
        name = filepath.parent.name
        image = face_recognition.load_image_file(filepath)

        face_locations = face_recognition.face_locations(image, model=model)
        face_encodings = face_recognition.face_encodings(image, face_locations)

        for encoding in face_encodings:
            names.append(name)
            encodings.append(encoding)

            name_encodings = {"names": names, "encodings": encodings}
    with encodings_location.open(mode="wb") as f:
        pickle.dump(name_encodings, f)

encode_known_faces()

def _recognize_face(unknown_encoding, loaded_encodings):
    boolean_matches = face_recognition.compare_faces(
        loaded_encodings["encodings"], unknown_encoding
    )
    votes = Counter(
        name
        for match, name in zip(boolean_matches, loaded_encodings["names"])
        if match
    )
    if votes:
        return votes.most_common(1)[0][0]

from PIL import Image, ImageDraw
from matplotlib import pyplot as plt

BOUNDING_BOX_COLOR = "blue"
TEXT_COLOR = "white"

def _display_face(draw, bounding_box, name):
    top, right, bottom, left = bounding_box
    draw.rectangle(((left, top), (right, bottom)), outline=BOUNDING_BOX_COLOR)
    text_left, text_top, text_right, text_bottom = draw.textbbox(
        (left, bottom), name
    )
    draw.rectangle(
        ((text_left, text_top), (text_right, text_bottom)),
        fill="blue",
        outline="blue",
    )
    draw.text(
        (text_left, text_top),
        name,
        fill="white",
    )

def recognize_faces(
    image_location: str,
    model: str = "hog",
    encodings_location: Path = DEFAULT_ENCODINGS_PATH,
) -> None:
    with encodings_location.open(mode="rb") as f:
        loaded_encodings = pickle.load(f)

    input_image = face_recognition.load_image_file(image_location)

    input_face_locations = face_recognition.face_locations(
        input_image, model=model
    )
    input_face_encodings = face_recognition.face_encodings(
        input_image, input_face_locations
    )

    pillow_image = Image.fromarray(input_image)
    draw = ImageDraw.Draw(pillow_image)

    for bounding_box, unknown_encoding in zip(
        input_face_locations, input_face_encodings
    ):
        name = _recognize_face(unknown_encoding, loaded_encodings)
        if not name:
            name = "Unknown"
        _display_face(draw, bounding_box, name)
    del draw
    plt.imshow(pillow_image)

"""## **Результат**"""

def validate(i, model: str = "hog"):
    for filepath in Path("/content/drive/MyDrive/face_recognizer/validation").rglob("*"):
        if filepath.is_file():
            i = i + 1
            pic_box.add_subplot(1,184,i+1)
            recognize_faces(image_location=str(filepath.absolute()), model=model)
            plt.axis('off')
i = 0
pic_box = plt.figure(figsize=(500,500))
validate(i)
plt.show()

"""## **Оценка схожести**"""

!wget http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2
!bunzip2 /content/shape_predictor_68_face_landmarks.dat.bz2

!wget http://dlib.net/files/dlib_face_recognition_resnet_model_v1.dat.bz2
!bunzip2 /content/dlib_face_recognition_resnet_model_v1.dat.bz2

import cv2
import os
import dlib
from glob import glob
import numpy as np
import statistics
from zipfile import ZipFile

face_detector = dlib.get_frontal_face_detector()
shape_predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")
face_encoder = dlib.face_recognition_model_v1("dlib_face_recognition_resnet_model_v1.dat")
VALID_EXTENSIONS = ['.png', '.jpg', '.jpeg']

def get_image_paths(root_dir, class_names):
    image_paths = []
    for class_name in class_names:
        class_dir = os.path.sep.join([root_dir, class_name])
        class_file_paths = glob(os.path.sep.join([class_dir, '*.*']))
        for file_path in class_file_paths:
            ext = os.path.splitext(file_path)[1]
            if ext.lower() not in VALID_EXTENSIONS:
                print("Skipping file: {}".format(file_path))
                continue
            image_paths.append(file_path)
    return image_paths

def face_rects(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    rects = face_detector(gray, 1)
    return rects

def face_landmarks(image):
    return [shape_predictor(image, face_rect) for face_rect in face_rects(image)]

def face_encodings(image):
    return [np.array(face_encoder.compute_face_descriptor(image, face_landmark))
            for face_landmark in face_landmarks(image)]

def nb_of_matches(known_encodings, unknown_encoding):
    distances = np.linalg.norm(known_encodings - unknown_encoding, axis=1)
    return distances

def get_class_names(image_dir):
  return [el.split(".")[0] for el in os.listdir(image_dir)]

!unzip /content/drive/MyDrive/face_recognizer_sim

root_dir = "Face_Recognizer_sim/Training"
class_names = get_class_names(root_dir)
image_paths = get_image_paths(root_dir, class_names)
name_encodings_dict = {}

nb_current_image = 1

name_encodings_dict.clear()
for image_path in image_paths:
  print(f"Image processed {nb_current_image}/{len(image_paths)}")
  image = cv2.imread(image_path)
  encodings = face_encodings(image)
  name = image_path.split(os.path.sep)[-1].split(".")[0]
  e = name_encodings_dict.get(name, [])
  e.extend(encodings)
  name_encodings_dict[name]  = e
  nb_current_image = nb_current_image + 1

"""## **Результат**"""

test_dir = "Face_Recognizer_sim/Validation"
image_paths_test = get_image_paths(test_dir, class_names)
for image_path_test in image_paths_test:
    image_test = cv2.imread(image_path_test)
    encodings = face_encodings(image_test)
    for encoding in encodings:
        counts = {}
        for (name, n_encodings) in name_encodings_dict.items():
            if n_encodings:
                counts[name] = nb_of_matches(n_encodings, encoding)
        print(image_path_test,' Схожесть фото:', 1-statistics.fmean(counts['4_Makarova']))

"""## **Вывод**:
наибольшую схожесть с изображением Макаровой составили изображения папки Макаровой, а именно 0.9, чужие изображения при этом составили максимальную схожесть в 0.2-0.3 балла, что  полностью соответсвует действительности и подтверждает правильную работу оценивания.
"""